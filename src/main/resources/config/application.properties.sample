
# для  нормальной работы проекта скопируйте данный файл с расширением properties полученный файл добавлять в GIT не нужно.

# Если вы делаете изменения в конфигурации для проекта то добавляйте их в sample
server.protocol=http
server.name=localhost
server.port=8888
client.port=3000
server.tomcat.remote-ip-header=X-Forwarded-For
server.tomcat.port-header=X-Forwarded-Port
server.tomcat.protocol-header=X-Forwarded-Proto
server.tomcat.protocol-header-https-value=https
#spring.thymeleaf.mode=LEGACYHTML5

# Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.
spring.http.encoding.charset=UTF-8
# Enable http encoding support.
spring.http.encoding.enabled=true
# Force the encoding to the configured charset on HTTP requests and responses.
spring.http.encoding.force=true

spring.jackson.serialization.fail-on-empty-beans=false


# Project properties
commentEditTime=5
privateMessage.allowedEditingTime=23

spring.thymeleaf.cache=false

spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS = false
spring.jackson.serialization.INDENT_OUTPUT=true

project.password.encoder.strength=12
project.password.min-length=8

# JWT secret word
project.jwt.secret-word=&GD-YY*7$g54Hoi&6
# Password recovery
# Recovery password token lifetime, pattern: Days-Hours-Minutes
project.password-recovery.token-expiration=1-12-30
# Request for new password recovery interval, pattern: Days-Hours-Minutes
project.password-recovery.interval=0-0-2
# Cron scheduled password-recovery-request database cleaning, Spring Cron format (second, minute, hour, day of month, month, day(s) of week)
# https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/CronSequenceGenerator.html
project.password-recovery.cleanup-db-cron=0 30 3 * * *

# unblocking filter file size by TomCat
server.tomcat.max-swallow-size=-1
# max file size
spring.servlet.multipart.max-file-size=20MB
# max request size
spring.servlet.multipart.max-request-size=20MB
# files upload location
upload.location=./uploads
# filesInChat upload location
filesInChat.location=./filesInChat/
# photoalbums create location
photoalbums.location=./media/
# avatar sizes
upload.medium=500
upload.small=100
# photo sizes
media.medium=500
media.small=250

springdoc.api-docs.path=/api/api-docs
springdoc.swagger-ui.path=/api/swagger-ui.html

logging.level.org.springframework=WARN
logging.level.org.hibernate=ERROR
logging.level.ru.java.mentor.oldranger.club=DEBUG

# --------------Datasource Properties-----------------------------------
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/jm_oldc?verifyServerCertificate=false&sessionVariables=sql_mode='NO_ENGINE_SUBSTITUTION'&jdbcCompliantTruncation=false&useSSL=false&requireSSL=false&useLegacyDatetimeCode=false&amp&serverTimezone=Europe/Moscow
#  ?characterEncoding=UTF-8&useUnicode=true&useSSL=false
spring.datasource.username=test
spring.datasource.password=test

#-------------------JPA Properties---------------------------------------
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.generate-ddl=true

#---------------------Data For Change Role Properties------------------------
spring.jpa.properties.hibernate.search.default.directory__provider=filesystem
spring.jpa.properties.hibernate.search.default.indexBase=./data/index/default
spring.jpa.properties.hibernate.search.analyzer=org.apache.lucene.analysis.ru.RussianAnalyzer

numberMessageForVeteran=2000
numberTimeForOld_timeInYears=2
minNumberMessageForOld_time=700
maxNumberMessageForOld_time=1999
scheduler.timeForChangeRole.cron=0 0 4 * * *

#----------------------------Mail Properties------------------------------------
# MailSender
spring.mail.host=smtp.gmail.com
spring.mail.port=465
spring.mail.username=oldrangerclub@gmail.com
spring.mail.password=rangeR]h.7j
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.ssl.enable=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
spring.mail.properties.mail.smtp.socketFactory.port=465
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory

#---------------------------Cache Properties------------------------------

# /Caffeine cache используется взамен стандартному кэш менеджеру spring/
# подключается зависимостями в Maven
# ______________________________________
# <dependency>
#     <groupId>org.springframework.boot</groupId>
#     <artifactId>spring-boot-starter-cache</artifactId>
# </dependency>
#
# <dependency>
#     <groupId>com.github.ben-manes.caffeine</groupId>
#     <artifactId>caffeine</artifactId>
#     <version>2.7.0</version>
# </dependency>
# _______________________________________
# Java Configure
# _______________________________________
# @Configuration
# @EnableCaching
# public class CaffeineCacheConfig {
#     public CacheManager cacheManager() {
#         CaffeineCacheManager cacheManager = new CaffeineCacheManager("users", "user1");
#         cacheManager.setCaffeine(caffeineCacheBuilder());
#         return cacheManager;
#     }
#
#     Caffeine<Object, Object> caffeineCacheBuilder() {
#         return Caffeine.newBuilder()
#                 .initialCapacity(100)
#                 .maximumSize(500)
#                 .expireAfterAccess(10, TimeUnit.MINUTES)
#                 .weakKeys()
#                 .recordStats();
#     }
#     public class CustomKeyGenerator implements KeyGenerator {
#
#         public Object generate(Object target, Method method, Object... params) {
#             return target.getClass().getSimpleName() + "_"
#                     + method.getName() + "_"
#                     + StringUtils.arrayToDelimitedString(params, "_");
#         }
#     }
#     @Bean("customKeyGenerator")
#     public KeyGenerator keyGenerator() {
#         return new CustomKeyGenerator();
#     }
# }
# //keyGenerator нужен для использования одного кэша в методах с разными возвращаемыми значениями
# и параметрами
# ______________________________________________________
# Основные настройки
# ______________________________________________________
# initialCapacity=[integer]: Минимальный общий размер для хэш таблиц
# maximumSize=[long]: максимальное число записей кэша, не использовать
# expireAfterAccess=[duration]: через сколько запись будет удалена из кэша
# expireAfterWrite=[duration]: через сколько запись будет удалена из кэша, после создания или обновления
# refreshAfterWrite=[duration]: через сколько запись в кэше будет автоматически обновлена
# weakKeys() позволяет сборщику мусора, управлять кешем (ключами)
# recordStats - позволяет записывать статистику использования кэша
# _____________________________________________________
# Настройка сервисного слоя
# _____________________________________________________
#
# @CacheConfig(cacheNames = {"имякэша"}) - Включение кэширование на уровне класса позволяет не указывать
# имя кэша в аннотации метода
# @Cachable - включение кэширования метода, также можно указать имя кэша, ключ  и условия кеширования
# 	@Cacheable(cacheNames={"book"}, condition="#name.length() < 32")
# 		public Book findBook(String name)
#
#
# @CacheEvict: отчистка кэша
# 	@CacheEvict(cacheNames={"book"}, allEntries=true)
# 		public void loadBooks(InputStream batch)
#
# @CachePut: Обновление кэша, не мешая выполнению метода
#
# @Caching: группировка операций кэша
# 	@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames="secondary", key="#p0") })
# 		public Book importBooks(String deposit, Date date)
#DOCS
# https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache
# https://habr.com/ru/post/465667/ немного на русском
# https://www.javadevjournal.com/spring-boot/spring-boot-with-caffeine-cache/
#_______________________________________
#В методах где стоит //add cache - нужно добавить новую страницу кэша в конфиге для этого класса, по позможности использовать keyGenerator для избежания ошибок
#в методах где стоит //clear cache - нужно отчистить кэш страницу для этого класса, можно так-же использовать разные страницы для разных типов данных.
#смотреть пример реализации кэширования в классах userService, topicService, articleService

INIT_CAPACITY=100
MAX_SIZE=500
LIVE_TIME=10
