# /Caffeine cache используется взамен стандартному кэш менеджеру spring/
# подключается зависимостями в Maven
# ______________________________________
# <dependency>
#     <groupId>org.springframework.boot</groupId>
#     <artifactId>spring-boot-starter-cache</artifactId>
# </dependency>
#
# <dependency>
#     <groupId>com.github.ben-manes.caffeine</groupId>
#     <artifactId>caffeine</artifactId>
#     <version>2.7.0</version>
# </dependency>
# _______________________________________
# Java Configure
# _______________________________________
# @Configuration
# @EnableCaching
# public class CaffeineCacheConfig {
#     public CacheManager cacheManager() {
#         CaffeineCacheManager cacheManager = new CaffeineCacheManager("users", "user1");
#         cacheManager.setCaffeine(caffeineCacheBuilder());
#         return cacheManager;
#     }
#
#     Caffeine<Object, Object> caffeineCacheBuilder() {
#         return Caffeine.newBuilder()
#                 .initialCapacity(100)
#                 .maximumSize(500)
#                 .expireAfterAccess(10, TimeUnit.MINUTES)
#                 .weakKeys()
#                 .recordStats();
#     }
#     public class CustomKeyGenerator implements KeyGenerator {
#
#         public Object generate(Object target, Method method, Object... params) {
#             return target.getClass().getSimpleName() + "_"
#                     + method.getName() + "_"
#                     + StringUtils.arrayToDelimitedString(params, "_");
#         }
#     }
#     @Bean("customKeyGenerator")
#     public KeyGenerator keyGenerator() {
#         return new CustomKeyGenerator();
#     }
# }
# //keyGenerator нужен для использования одного кэша в методах с разными возвращаемыми значениями
# и параметрами
# ______________________________________________________
# Основные настройки
# ______________________________________________________
# initialCapacity=[integer]: Минимальный общий размер для хэш таблиц
# maximumSize=[long]: максимальное число записей кэша, не использовать
# expireAfterAccess=[duration]: через сколько запись будет удалена из кэша
# expireAfterWrite=[duration]: через сколько запись будет удалена из кэша, после создания или обновления
# refreshAfterWrite=[duration]: через сколько запись в кэше будет автоматически обновлена
# weakKeys() позволяет сборщику мусора, управлять кешем (ключами)
# recordStats - позволяет записывать статистику использования кэша
# _____________________________________________________
# Настройка сервисного слоя
# _____________________________________________________
#
# @CacheConfig(cacheNames = {"имякэша"}) - Включение кэширование на уровне класса позволяет не указывать
# имя кэша в аннотации метода
# @Cachable - включение кэширования метода, также можно указать имя кэша, ключ  и условия кеширования
# 	@Cacheable(cacheNames={"book"}, condition="#name.length() < 32")
# 		public Book findBook(String name)
#
#
# @CacheEvict: отчистка кэша
# 	@CacheEvict(cacheNames={"book"}, allEntries=true)
# 		public void loadBooks(InputStream batch)
#
# @CachePut: Обновление кэша, не мешая выполнению метода
#
# @Caching: группировка операций кэша
# 	@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames="secondary", key="#p0") })
# 		public Book importBooks(String deposit, Date date)
#DOCS
# https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache
# https://habr.com/ru/post/465667/ немного на русском
# https://www.javadevjournal.com/spring-boot/spring-boot-with-caffeine-cache/
#_______________________________________
#В методах где стоит //add cache - нужно добавить новую страницу кэша в конфиге для этого класса, по позможности использовать keyGenerator для избежания ошибок
#в методах где стоит //clear cache - нужно отчистить кэш страницу для этого класса, можно так-же использовать разные страницы для разных типов данных.
#смотреть пример реализации кэширования в классах userService, topicService, articleService

INIT_CAPACITY=100
MAX_SIZE=500
LIVE_TIME=10